#!/bin/sh
# Overcome the issues with Python's bz2 by decompressing and the compresssing
# the data.

#set -x

# Collect absolute paths to binaries.

mv='/bin/mv'
find='/usr/bin/find'
cat='/bin/cat'
basename='/bin/basename'
echo='/bin/echo'
touch='/bin/touch'
grep='/bin/grep'
sed='/bin/sed'

bzip2='/bin/bzip2'

# Remember files that we have converted.

# On any signal, just quit.
trap "exit 1" SIGINT SIGTERM SIGKILL ERR

usage() {
  script_name=`${basename} $0`
  ${cat} <<EOF
Usage: ${script_name} DATA_DIR

  Uncompress and then compress all files in DATA_DIR using bzip2.

  DATA_DIR    data file directory
EOF
}

# Check arguments.
if [ $# -ne 1 ]; then
  ${echo} Invalid arguments 1>&2
  usage
  exit 1
fi

data_dir=$1; shift


# Check that data directory is valid.
if [ ! -d "${data_dir}" ]; then
  ${echo} Invalid data dir: \"${data_dir}\" 2>&2
  exit 1
fi

# Make sure processed log file exists.
processed_log="${data_dir}/processed.log"
${touch} "${processed_log}"

# Get list of files that have been rolled over (have a dot in them).
for path in `${find} "${data_dir}" -type f -name '*.*'`; do
  filename=`basename "${path}"`

  # Filter ignored filename types.
  if ${echo} "${filename}" | ${grep} -Eq '(\.bz2$|\.tmp$|\.log$)' \
    || ${echo} "${filename}" | ${grep} -f "${processed_log}"; then
    echo "Skipping ${filename}"
    continue
  fi

  ${echo} "Re-compressing ${filename}"
  tmp_filename="${data_dir}/${filename}.tmp"
  ${bzip2} -cd "${data_dir}/${filename}" >"${tmp_filename}"
  ${bzip2} -z "${tmp_filename}"
  ${mv} "${tmp_filename}.bz2" "${data_dir}/${filename}"

  # Add processed record.
  ${echo} "${filename}" >> ${processed_log}
done

exit 0
