#!/bin/bash
# Use bzip2 to compress the collected tweet data.

data_prefix="ate_eating_eat_nyc"

# Collect absolute paths to binaries.

mv='/bin/mv'
cp='/bin/cp'
cat='/bin/cat'
basename='/bin/basename'
echo='/bin/echo'
touch='/bin/touch'
grep='/bin/grep'
sed='/bin/sed'

# N.B. Python bzip module is very sensitive to the version of bzip2 used to
# compress files. Do not be tempted to use pbzip2 or anything else here other
# than bzip2.
bzip2='/bin/bzip2'
if [ ! -f ${bzip2} ]; then
  bzip2='/usr/bin/bzip2'
fi

# Using /tmp on a system where /tmp is a ramdrive is beneficial.
#
# N.B. In the case when /tmp is a separate partition or device, it might be
# better to copy files next to the source and then relink using `mv`. Of
# course, this requires a filesystem that supports linking.
tmp_dir=`mktemp -d "${TMPDIR:-/tmp}"/noweats.XXXX`

# On any signal, just quit.
trap "rm -rf ${tmp_dir} && exit 1" SIGINT SIGTERM SIGKILL ERR

usage() {
    script_name=`${basename} $0`
    ${cat} <<EOF
Usage: ${script_name} DATA_DIR

  Compress all files in DATA_DIR using bzip2.

  After compression, the file will be listed in DATA_DIR/processed_log. It will
  not be compressed again.

  DATA_DIR    data file directory
EOF
}

# Check arguments.
if [ $# -ne 1 ]; then
    ${echo} Invalid arguments 1>&2
    usage
    exit 1
fi

data_dir=$1; shift


# Check that data directory is valid.
if [ ! -d "${data_dir}" ]; then
    ${echo} Invalid data dir: \"${data_dir}\" 2>&2
    exit 1
fi

# Make sure processed log file exists.
processed_log="${data_dir}/processed.log"
${touch} "${processed_log}"

# Read associative array of files.
declare -A processed_files
while read -r file; do
    processed_files["${file}"]=1
done <"${processed_log}"

# Get list of files that have been rolled over (have a dot in them).
for path in "${data_dir}/${data_prefix}".*_[0-9][0-9]; do
    filename=`basename "${path}"`
    ext="${filename##*.}"

    if [[ -z ${processed_files["${filename}"]} ]]; then
        ${echo} "Compressing ${filename}"
        tmp_path="${tmp_dir}/${filename}.tmp"
        ${cp} "${data_dir}/${filename}" "${tmp_path}"
        ${bzip2} -z "${tmp_path}"
        ${mv} "${tmp_path}.bz2" "${data_dir}/${filename}"

        # Add processed record.
        ${echo} "${filename}" >> ${processed_log}
    fi

    # Update file date stamp.
    date=`${echo} "${filename}" \
        | ${sed} -e 's/.*\([0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}_[0-9]\{2\}\).*/\1/' \
        -e 's/_\([0-9]\{2\}\)$/ \1:00:00/'`
    ${echo} "Resetting timestamp of ${filename} to ${date}"
    ${touch} -d "${date}" "${data_dir}/${filename}"

done

exit 0
